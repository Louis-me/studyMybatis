<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="gradeMapper">
    <!-- 定义封装resultMap
     property 实体中对应的属性
     column 数据库对应的列（select查询返回的列表）
     -->
    <resultMap id="gradeStudentMap" type="xyz.shi.domain.Grade">
        <id property="id" column="gid"/>
        <result property="name" column="gname"/>
        <!--一对多关系的时候，一方使用collection标签映射多方 -->
        <collection property="students" ofType="xyz.shi.domain.Student">
            <id property="id" column="sid"/>
            <result property="name" column="sname"/>

        </collection>
    </resultMap>
    <!--配置查询所有，重复的列需要重命名-->
    <select id="findAll" resultMap="gradeStudentMap">
        select g.id as gid, g.name as gname, s.id as sid, s.name as sname from grade g left join student s on g.id = s.gid
    </select>
<!--    通过id(唯一)获取用户-->
    <select id="queryOne" parameterType="int" resultMap="gradeStudentMap">
        select s.name as sname,g.name as gname, g.id as gid, s.id as sid from grade g, student s where g.id = s.gid and g.id=#{id}
    </select>
    <!-- 插入 userGeneratedKeys和keyProperty属性可以让插入后对象获得本身自己的id
    -->
    <insert id="insertGrade" parameterType="Grade"
            useGeneratedKeys="true" keyProperty="id">
        insert into grade (name) values(#{name})
    </insert>
    <insert id="insertStudent" parameterType="xyz.shi.domain.Student">
        INSERT INTO student (name, gid) VALUES (#{name}, #{grade.id})
    </insert>
    <!-- 批量新增的时候，注意接收的对象是一个列表，需要在动态拼接sql的时候遍历参数集合对象 -->
    <insert id="insertBatchStudent" parameterType="java.util.List">
        Insert into student (name,gid) values
        <foreach collection="list" item="item" separator=",">
            (#{item.name},#{item.grade.id})
        </foreach>
    </insert>
    <update id="updateBatchStudent" parameterType="java.util.List">
        <foreach collection="list" item="item" separator=";">
            update student set name = #{item.name},gid = #{item.grade.id} where id = #{item.id}
        </foreach>
    </update>
    <delete id="deleteBatchStudent" parameterType="java.util.List">
        delete from student where id in
        <foreach collection="list" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>
</mapper>